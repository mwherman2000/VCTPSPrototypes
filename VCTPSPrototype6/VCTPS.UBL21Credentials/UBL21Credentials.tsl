// Trusted Digial Web Project
// Hyperonomy Digital Identity Lab
// Parallelspace Corporation
// (c) Copyright 2021 Parallelspace Corporation. All Rights Reserved

// http://docs.oasis-open.org/ubl/os-UBL-2.1/UBL-2.1.html#T-INVOICE
// http://docs.oasis-open.org/ubl/os-UBL-2.1/xml/UBL-Invoice-2.1-Example.xml
// https://docs.oasis-open.org/ubl/os-UBL-2.3/xml/UBL-Invoice-2.1-Example-Trivial.xml

// Context:
// <Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"
//	xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"
//	xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
// UBLVersionID: 2.1

include "../VCTPS.Common/BTTGenericCredential.tsl";
//include "../TDW.TRACommon/UBL21CommonAggregateComponents.tsl";

//////////////////////////////////////////////////////////////////////////////
/// UBL 2.1 Credentials 

struct Cac_Item_Claims										 // in ItemCatalog
{
	string cbc_UBLVersionID;
	string cbc_ID;
	string cbc_Name;
	Cac_SellersItemIdentification cac_SellersItemIdentification;
	Cbc_SchemeCode cac_StandardItemIdentification;
	List<Cbc_ListCode> cac_CommodityClassification;
	Cac_ClassifiedTaxCategory cac_ClassifiedTaxCategory;
}

struct Cac_Item_EnvelopeContent
{
	string udid;
	List<string> context;
	optional string credentialsubjectudid; // bound credential
	optional Cac_Item_Claims claims;
	optional BTTEncryptedClaims encryptedclaims;
}

struct Cac_Item_Envelope
{
	string udid;
	BTTGenericCredential_PackingLabel label;
	Cac_Item_EnvelopeContent content;
}

struct Cac_Item_SealedEnvelope
{
	Cac_Item_Envelope envelope;
	BTTGenericCredential_EnvelopeSeal envelopeseal;
}

//////////////////////////////////////////////////////////////////////////////

struct Cac_PartyLegalEntity_Claims				     // in LegalEntityRegister
{
	string cbc_RegistrationName;
	Cbc_SchemeCode cbc_CompanyID;
	Cac_Address cbc_RegistrationAddress;
}

struct Cac_PartyLegalEntity_EnvelopeContent
{
	string udid;	
	List<string> context;
	optional string credentialsubjectudid;		// bound credential
	optional Cac_PartyLegalEntity_Claims claims;
	optional BTTEncryptedClaims encryptedclaims;
}

struct Cac_PartyLegalEntity_Envelope
{
	string udid;
	BTTGenericCredential_PackingLabel label;
	Cac_PartyLegalEntity_EnvelopeContent content;
}

struct Cac_PartyLegalEntity_SealedEnvelope
{
	Cac_PartyLegalEntity_Envelope envelope;
	BTTGenericCredential_EnvelopeSeal envelopeseal;
}

//////////////////////////////////////////////////////////////////////////////

struct Cac_PayeeFinancialAccount_Claims			// in FinancalAccount Register
{
	string cbc_ID;
	Cac_FinancialInstitutionBranch cac_FinancialInstitutionBranch;
}

struct Cac_PayeeFinancialAccount_EnvelopeContent
{
	string udid;	
	List<string> context;
	optional string credentialsubjectudid; // bound credential
	optional Cac_PayeeFinancialAccount_Claims claims;
	optional BTTEncryptedClaims encryptedclaims;
}

struct Cac_PayeeFinancialAccount_Envelope
{
	string udid;
	BTTGenericCredential_PackingLabel label;
	Cac_PayeeFinancialAccount_EnvelopeContent content;
}

struct Cac_PayeeFinancialAccount_SealedEnvelope
{
	Cac_PayeeFinancialAccount_Envelope envelope;
	BTTGenericCredential_EnvelopeSeal envelopeseal;	
}

//////////////////////////////////////////////////////////////////////////////

struct Cac_Party_Claims									 // in Party Directory
{
	string cbc_UBLVersionID;
	string cbc_ID;

	Cbc_SchemeCode cbc_EndpointID;
	Cac_PartyIdentification cbc_PartyIdentification;
	Cac_PartyName cbc_PartyName;
	Cac_Address cac_PostalAddress;
	Cac_PartyTaxScheme cbc_PartyTaxScheme;
	
	string cac_PartyLegalEntityUdid;	// Cac_PartyLegalEntity_SealedEnvelope
	Cac_Contact cac_Contact;
	Cac_Person cac_Person;
}

struct Cac_Party_EnvelopeContent
{
	string udid;	
	List<string> context;	
	optional string credentialsubjectudid; // bound credential
	optional Cac_Party_Claims claims;
	optional BTTEncryptedClaims encryptedclaims;
}

struct Cac_Party_Envelope
{
	string udid;
	BTTGenericCredential_PackingLabel label;
	Cac_Party_EnvelopeContent content;
}

struct Cac_Party_SealedEnvelope
{
	Cac_Party_Envelope envelope;
	BTTGenericCredential_EnvelopeSeal envelopeseal;
}

//////////////////////////////////////////////////////////////////////////////

struct UBL21_Invoice2_Claims							 // in Invoice Journal
{
	string cbc_UBLVersionID;
	string cbc_ID;

	DateTime cbc_IssueDate;
	Cbc_ListCode cbc_InvoiceTypeCode;
	Cbc_Note cbc_Note;
	
	DateTime cbc_TaxPointDate;
	Cbc_ListCode cbc_DocumentCurrencyCode;
	string cbc_AccountingCost;
	Cbc_TimePeriod cbc_InvoicePeriod;
	Cbc_OrderReference cbc_OrderReference;

	Cac_DocumentReference cac_ContractDocumentReference;
	List<Cac_DocumentReference> cac_AdditionalDocumentReferences;

	Cac_AccountingSupplierParty cac_AccountingSupplierParty;
	Cac_AccountingCustomerParty cac_AccountingCustomerParty;
	Cac_PayeeParty cac_PayeeParty;

	Cac_Delivery cac_Delivery;

	Cac_PaymentMeans cac_PaymentMeans; 
	Cac_PaymentTerms cac_PaymentTerms;
	List<Cac_AllowanceCharge> cac_AllowanceCharges;
	Cac_TaxTotal cac_TaxTotal;
	Cac_LegalMonetaryTotal cac_LegalMonetaryTotal;
	List<Cac_InvoiceLine> cac_InvoiceLine;
}

struct UBL21_Invoice2_EnvelopeContent
{
	string udid;	
	List<string> context;
	optional string credentialsubjectudid; // bound credential
	optional UBL21_Invoice2_Claims claims;
	optional BTTEncryptedClaims encryptedclaims;
}

struct UBL21_Invoice2_Envelope
{
	string udid;
	BTTGenericCredential_PackingLabel label;
	UBL21_Invoice2_EnvelopeContent content;
}

struct UBL21_Invoice2_SealedEnvelope
{
	UBL21_Invoice2_Envelope envelope;
	BTTGenericCredential_EnvelopeSeal envelopeseal;
}