// BlueToqueTools
// Trusted Digial Web Project
// Hyperonomy Digital Identity Lab
// Parallelspace Corporation
// (c) Copyright 2021-2022 Parallelspace Corporation. All Rights Reserved

//////////////////////////////////////////////////////////////////////////////
/// BlueToqueTools Common Types

enum BTTTrustLevel
{
	Undefined,	
	UnResolvable,
	Unsigned,
	HashedThumbprint,
	SignedHashSignature,
	Notarized,
	CorruptSignatures
}

enum BTTEncryptionFlag
{
	NotEncrypted,
	Encrypted
}

enum BTTGenericCredentialType
{
	GenericCredential,
	UDIDDocument,
	VerifiableCredential,
	NotarizedCredential,	
	VerifiableCapabilityAuthorization,
	MasterVerifiableCapabilityAuthorization,
	ServerCertificate,
	RevocationCertificate,
	Object,
	BlueToqueNfe,
	BlueToqueDeed,
	BlueToqueAgent,
	BlueToqueProcess,
	BlueToqueBizDoc
}

enum BTTServiceType
{
	Unknown,
	ProcessingAgent,
	StorageAgent,
	VerifiableDataRegistryService,
	DIDRegistryAgent,
	SEPREgistryAgent,
	RevocationListAgent,
	SmartContractRegistryAgent,
	KeyManagementAgent,
	MasterKeyManagementAgent,
	AuthenticationAgent,
	AuthorivationAgent,
	UDIDDocumentVerificationAgent,
	StructuredCredentialVerificationAgent
}

//////////////////////////////////////////////////////////////////////////////

struct BTTKeyValuePair
{
	string key;
	string value;
}

struct BTTClaim
{
	string key; // for one of the following...
	optional string value;				    
	optional List<BTTKeyValuePair> attribute;
	optional List<List<BTTKeyValuePair>> attributes;
}

struct BTTEncryptedClaims
{
	string ciphertext16;
	string alg; // TODO
	string key; // TODO
}

struct BTTGenericCredential_EnvelopeContent
{
	string                      udid;	
	List<string>                context;
	optional string             credentialsubjectudid;	// bound credential
	optional List<BTTClaim>     credentialsubjectclaims;
	optional BTTEncryptedClaims encryptedclaims;
}

struct BTTGenericCredential_PackingLabel
{
	List<string>				types;
	BTTGenericCredentialType    credtype;	
	long                        version;
	BTTTrustLevel               trustLevel;	
	BTTEncryptionFlag           encryptionFlag;
	string                      notaryudid;
	optional string             name;
	optional List<string>       comments;
}

struct BTTGenericCredential_EnvelopeSeal 
{
	optional string             hashedThumbprint64;		// digital hash
	optional string             signedHashSignature64;	// digital signature of digital hash
	optional string             notaryStamp;			// verifiable data registry key
	optional List<string>       comments;
}

struct BTTGenericCredential_Envelope
{
	string                               udid;			// same value as content.udid
	BTTGenericCredential_PackingLabel    label;
	BTTGenericCredential_EnvelopeContent content;
}

struct BTTVerifiableCredential_SealedEnvelope
{	
	BTTGenericCredential_Envelope        envelope;
	BTTGenericCredential_EnvelopeSeal    proof;
}

///////////////////////////////////////////////////////////////////////////////

cell struct BTTVerifiableCredential_SealedEnvelope_Cell // Serializable, persistable, and verifiable FDO
{	
	BTTVerifiableCredential_SealedEnvelope signedenvelope;
}
