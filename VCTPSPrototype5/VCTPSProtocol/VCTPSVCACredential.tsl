// Secure Verifiable Credential Transport Protocol (VCTPS)
// Verifiable Capability Authorization-based Verifiable Credential Exchange Protocol over DIDCOMM
// - using the .NET version of the https://github.com/trinsic-id/okapi/tree/main/dotnet Okapi DID libraries
//   and the Microsoft "Trinity" Graph Engine object platform
//
// BlueToque Tools, Trusted Digital Web Project, Hyperonomy Digital Identity Lab, Parallelspace Corporation
// http://hyperonomy.com
// (c) Copyright 2022. Parallelspace Corporation, Bindloss, Alberta, Canada

include "../Common/BTTGenericCredential.tsl";

enum VCTPS_VCA_Rights
{	
	receive,
	accept,
	verify,
	inspect,
	validate,
	process,
	forward,
	store,
	clone
}

enum VCTPS_VCA_ProcessingActions
{
	accept,
	reject,
	rejectwithchanges
}

enum VCTPS_VCA_Types
{
	Proclamation,
	Acknowledgement
}

struct VCTPS_VCA_Caveat
{
	string id;
	List<string> rights;		// VCTPS_VCA_Rights.ToString()
	List<string> restrictions;	// VCTPS_VCA_Rights.ToString()
	List<string> processing;	// VCTPS_VCAACK_ProcessingActions.ToString()
}

struct VCTPS_VCA_Claims
{
	string vcatype;				// VCTPS_VCA_Types.ToString()
	string parent;
	string subject;
	string grantedkey;
	VCTPS_VCA_Caveat caveat;
}

struct VCTPS_VCA_EnvelopeContent
{
	string udid;
	List<string>                        context;
	optional string                     credentialsubjectudid;	// bound credential
	optional VCTPS_VCA_Claims           claims;
	optional BTTEncryptedClaims         encryptedclaims;
}

struct VCTPS_VCA_Envelope
{
	string                              udid;					// same value as content.udid
    BTTGenericCredential_PackingLabel   label;
	VCTPS_VCA_EnvelopeContent           content;
}

struct VCTPS_VCA_SealedEnvelope
{
	VCTPS_VCA_Envelope                  envelope;
	BTTGenericCredential_EnvelopeSeal   proof;
}
